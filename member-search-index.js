memberSearchIndex = [{"p":"micycle.pgs.color","c":"Blending","l":"add(int, int)","url":"add(int,int)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"area(PShape)","url":"area(processing.core.PShape)"},{"p":"micycle.pgs.color","c":"Blending","l":"average(int, int)","url":"average(int,int)"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull.ThresholdHeuristic","l":"AVG"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"BEVEL"},{"p":"micycle.pgs.color","c":"RGB","l":"BLACK"},{"p":"micycle.pgs.color","c":"Blending","l":"Blending()","url":"%3Cinit%3E()"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Bone","l":"Bone(PVector, PVector)","url":"%3Cinit%3E(processing.core.PVector,processing.core.PVector)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"bones"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"branches"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"buffer(PShape, double)","url":"buffer(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"centroid(PShape)","url":"centroid(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"circularity(PShape)","url":"circularity(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"closestPoint(PShape, PVector)","url":"closestPoint(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"closestPoints(PShape, PVector)","url":"closestPoints(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"complement(PShape, double, double)","url":"complement(processing.core.PShape,double,double)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkDiff(Geometry, Geometry, boolean, boolean)","url":"compMinkDiff(org.locationtech.jts.geom.Geometry,org.locationtech.jts.geom.Geometry,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkDiffGeometryCollection(GeometryCollection, Geometry, boolean)","url":"compMinkDiffGeometryCollection(org.locationtech.jts.geom.GeometryCollection,org.locationtech.jts.geom.Geometry,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkDiffMultiPlgLS(MultiPolygon, LineString, boolean)","url":"compMinkDiffMultiPlgLS(org.locationtech.jts.geom.MultiPolygon,org.locationtech.jts.geom.LineString,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkDiffMultiPlgPlg(MultiPolygon, Polygon, boolean, boolean)","url":"compMinkDiffMultiPlgPlg(org.locationtech.jts.geom.MultiPolygon,org.locationtech.jts.geom.Polygon,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkDiffPlgLS(Polygon, LineString, boolean)","url":"compMinkDiffPlgLS(org.locationtech.jts.geom.Polygon,org.locationtech.jts.geom.LineString,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkDiffPlgPlg(Polygon, Polygon, boolean, boolean)","url":"compMinkDiffPlgPlg(org.locationtech.jts.geom.Polygon,org.locationtech.jts.geom.Polygon,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSum(Geometry, Geometry, boolean, boolean)","url":"compMinkSum(org.locationtech.jts.geom.Geometry,org.locationtech.jts.geom.Geometry,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumGeometryCollection(GeometryCollection, Geometry, boolean, boolean)","url":"compMinkSumGeometryCollection(org.locationtech.jts.geom.GeometryCollection,org.locationtech.jts.geom.Geometry,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumLSLS(LineString, LineString, boolean)","url":"compMinkSumLSLS(org.locationtech.jts.geom.LineString,org.locationtech.jts.geom.LineString,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumLSPlg(LineString, Polygon, boolean, boolean)","url":"compMinkSumLSPlg(org.locationtech.jts.geom.LineString,org.locationtech.jts.geom.Polygon,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumMultiLSLS(MultiLineString, LineString, boolean)","url":"compMinkSumMultiLSLS(org.locationtech.jts.geom.MultiLineString,org.locationtech.jts.geom.LineString,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumMultiLSPlg(MultiLineString, Polygon, boolean, boolean)","url":"compMinkSumMultiLSPlg(org.locationtech.jts.geom.MultiLineString,org.locationtech.jts.geom.Polygon,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumMultiPlgLS(MultiPolygon, LineString, boolean)","url":"compMinkSumMultiPlgLS(org.locationtech.jts.geom.MultiPolygon,org.locationtech.jts.geom.LineString,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumMultiPlgPlg(MultiPolygon, Polygon, boolean, boolean)","url":"compMinkSumMultiPlgPlg(org.locationtech.jts.geom.MultiPolygon,org.locationtech.jts.geom.Polygon,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumMultiPoint(MultiPoint, Geometry, boolean, boolean)","url":"compMinkSumMultiPoint(org.locationtech.jts.geom.MultiPoint,org.locationtech.jts.geom.Geometry,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumPlgLS(Polygon, LineString, boolean)","url":"compMinkSumPlgLS(org.locationtech.jts.geom.Polygon,org.locationtech.jts.geom.LineString,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumPlgPlg(Polygon, Polygon, boolean, boolean)","url":"compMinkSumPlgPlg(org.locationtech.jts.geom.Polygon,org.locationtech.jts.geom.Polygon,boolean,boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"compMinkSumPoint(Point, Geometry, boolean, boolean)","url":"compMinkSumPoint(org.locationtech.jts.geom.Point,org.locationtech.jts.geom.Geometry,boolean,boolean)"},{"p":"micycle.pgs.color","c":"RGB","l":"composeColor(int, int, int, int)","url":"composeColor(int,int,int,int)"},{"p":"micycle.pgs.color","c":"RGB","l":"composeColor(int, int, int)","url":"composeColor(int,int,int)"},{"p":"micycle.pgs.color","c":"Composite","l":"Composite()","url":"%3Cinit%3E()"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull","l":"ConcaveHull()","url":"%3Cinit%3E()"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"ConcaveHull(Collection<Coordinate>, GeometryFactory)","url":"%3Cinit%3E(java.util.Collection,org.locationtech.jts.geom.GeometryFactory)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"ConcaveHull(Collection<Geometry>, double)","url":"%3Cinit%3E(java.util.Collection,double)"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull","l":"ConcaveHull(ConcaveHull.ThresholdHeuristic, double)","url":"%3Cinit%3E(org.geodelivery.jap.concavehull.ConcaveHull.ThresholdHeuristic,double)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"ConcaveHull(Coordinate[], GeometryFactory)","url":"%3Cinit%3E(org.locationtech.jts.geom.Coordinate[],org.locationtech.jts.geom.GeometryFactory)"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull","l":"ConcaveHull(double)","url":"%3Cinit%3E(double)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"ConcaveHull(Geometry, double)","url":"%3Cinit%3E(org.locationtech.jts.geom.Geometry,double)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"ConcaveHull(Geometry)","url":"%3Cinit%3E(org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"concaveHull(List<PVector>, double)","url":"concaveHull(java.util.List,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"concaveHull2(List<PVector>, double)","url":"concaveHull2(java.util.List,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"contains(PShape, PShape)","url":"contains(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"containsAllPoints(PShape, List<PVector>)","url":"containsAllPoints(processing.core.PShape,java.util.List)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"containsPoint(PShape, PVector)","url":"containsPoint(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"containsPoints(PShape, List<PVector>)","url":"containsPoints(processing.core.PShape,java.util.List)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"convexHull(PShape...)","url":"convexHull(processing.core.PShape...)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"coordArrayVectorAddition(Coordinate[], Coordinate[], GeometryFactory)","url":"coordArrayVectorAddition(org.locationtech.jts.geom.Coordinate[],org.locationtech.jts.geom.Coordinate[],org.locationtech.jts.geom.GeometryFactory)"},{"p":"micycle.pgs.utility","c":"CornerRounding","l":"CornerRounding()","url":"%3Cinit%3E()"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createArc(double, double, double, double, double, double)","url":"createArc(double,double,double,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createRandomPolygon(int, double, double)","url":"createRandomPolygon(int,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createStar(double, double, int, double, double, double)","url":"createStar(double,double,int,double,double,double)"},{"p":"micycle.pgs.utility","c":"Star","l":"createStarShape(double, double, double, double, int, double)","url":"createStarShape(double,double,double,double,int,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createSupercircle(double, double, double, double, double)","url":"createSupercircle(double,double,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createSuperShape(double, double, double, double, double, double, double)","url":"createSuperShape(double,double,double,double,double,double,double)"},{"p":"micycle.pgs.utility","c":"PolygonDecomposition","l":"decompose(Polygon)","url":"decompose(org.locationtech.jts.geom.Polygon)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"deepCloneCoordArray(Coordinate[])","url":"deepCloneCoordArray(org.locationtech.jts.geom.Coordinate[])"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"delaunayTriangulation(PShape, List<PVector>, boolean, int, boolean)","url":"delaunayTriangulation(processing.core.PShape,java.util.List,boolean,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"delaunayTriangulationPoints(PShape, List<PVector>, boolean, int, boolean)","url":"delaunayTriangulationPoints(processing.core.PShape,java.util.List,boolean,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"delaunayTriangulationTin(PShape, List<PVector>, boolean, int, boolean)","url":"delaunayTriangulationTin(processing.core.PShape,java.util.List,boolean,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"densify(PShape, double)","url":"densify(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"density(PShape)","url":"density(processing.core.PShape)"},{"p":"micycle.pgs.color","c":"Blending","l":"difference(int, int)","url":"difference(int,int)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"disableAllFill(PShape)","url":"disableAllFill(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"distance(PShape, PShape)","url":"distance(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"earCutTriangulation(List<PVector>)","url":"earCutTriangulation(java.util.List)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Edge","l":"Edge(PVector, PVector)","url":"%3Cinit%3E(processing.core.PVector,processing.core.PVector)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"edges"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Ray","l":"endPoint"},{"p":"micycle.pgs","c":"PGS_Processing","l":"envelope(PShape)","url":"envelope(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"erosionDilation(PShape, double)","url":"erosionDilation(processing.core.PShape,double)"},{"p":"micycle.pgs.color","c":"Blending","l":"exclusion(int, int)","url":"exclusion(int,int)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"exportTriangles(GeometryFactory)","url":"exportTriangles(org.locationtech.jts.geom.GeometryFactory)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipHorizontal(PShape, double)","url":"flipHorizontal(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipHorizontal(PShape)","url":"flipHorizontal(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipVertical(PShape, double)","url":"flipVertical(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipVertical(PShape)","url":"flipVertical(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"fromPShape(PShape)","url":"fromPShape(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"fromPVector(List<PVector>)","url":"fromPVector(java.util.List)"},{"p":"micycle.pgs.utility","c":"MinimumBoundingEllipse","l":"gaussian(double[][], int[])","url":"gaussian(double[][],int[])"},{"p":"micycle.pgs.utility","c":"PoissonDistribution","l":"generate(double, double, double, double, double, int)","url":"generate(double,double,double,double,double,int)"},{"p":"micycle.pgs.utility","c":"PoissonDistribution","l":"generate(float, float, float, float, float, int)","url":"generate(float,float,float,float,float,int)"},{"p":"micycle.pgs.utility","c":"RandomPolygon","l":"generateRandomConvexPolygon(int, double, double)","url":"generateRandomConvexPolygon(int,double,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"generateRandomGridPoints(PShape, int, boolean, double)","url":"generateRandomGridPoints(processing.core.PShape,int,boolean,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"generateRandomPoints(PShape, int)","url":"generateRandomPoints(processing.core.PShape,int)"},{"p":"micycle.pgs.utility","c":"GaussianLineSmoothing","l":"get(LineString, double, double)","url":"get(org.locationtech.jts.geom.LineString,double,double)"},{"p":"micycle.pgs.utility","c":"GaussianLineSmoothing","l":"get(LineString, double)","url":"get(org.locationtech.jts.geom.LineString,double)"},{"p":"micycle.pgs.utility","c":"MinimumBoundingEllipse","l":"getBoundingCoordinates(int)"},{"p":"micycle.pgs.utility","c":"MinimumBoundingEllipse","l":"getCenter()"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"getChildren(PShape, List<PShape>)","url":"getChildren(processing.core.PShape,java.util.List)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"getConcaveHullBFS(TriangleChecker, boolean, boolean)","url":"getConcaveHullBFS(uk.osgb.algorithm.concavehull.TriangleChecker,boolean,boolean)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"getConcaveHullDFS(TriangleChecker)","url":"getConcaveHullDFS(uk.osgb.algorithm.concavehull.TriangleChecker)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"getConcaveHullMetric(TriangleChecker, TriMetricLength, boolean, boolean)","url":"getConcaveHullMetric(uk.osgb.algorithm.concavehull.TriangleChecker,uk.osgb.algorithm.concavehull.TriMetricLength,boolean,boolean)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"getConcaveHullWithHolesAlpha(TriCheckerAlpha)","url":"getConcaveHullWithHolesAlpha(uk.osgb.algorithm.concavehull.TriCheckerAlpha)"},{"p":"uk.osgb.algorithm.concavehull","c":"ConcaveHull","l":"getConcaveHullWithHolesChi(TriCheckerChi)","url":"getConcaveHullWithHolesChi(uk.osgb.algorithm.concavehull.TriCheckerChi)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"getGeometryFactory()"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"getHoles(MultiPolygon)","url":"getHoles(org.locationtech.jts.geom.MultiPolygon)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"getHoles(Polygon, Collection<LinearRing>)","url":"getHoles(org.locationtech.jts.geom.Polygon,java.util.Collection)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"getHoles(Polygon)","url":"getHoles(org.locationtech.jts.geom.Polygon)"},{"p":"micycle.pgs.utility","c":"MaximumInscribedRectangle","l":"getInscribedRectangle()"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerChi","l":"getLength()"},{"p":"micycle.pgs.utility","c":"MinimumBoundingEllipse","l":"getMatrix()"},{"p":"micycle.pgs.utility","c":"PoissonDistribution","l":"getPoints()"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerAlpha","l":"getR()"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"getShellRing(Polygon)","url":"getShellRing(org.locationtech.jts.geom.Polygon)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"getShellRings(MultiPolygon)","url":"getShellRings(org.locationtech.jts.geom.MultiPolygon)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"holes(PShape)","url":"holes(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"homotheticTransformation(PShape, PVector, double, double)","url":"homotheticTransformation(processing.core.PShape,processing.core.PVector,double,double)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"intersect(PShape, PShape)","url":"intersect(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"intersect(PShape, PShape)","url":"intersect(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs.utility","c":"MinimumBoundingEllipse","l":"inv2(double[][])"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"isConvex(PShape)","url":"isConvex(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"isolines(List<PVector>, double, double, double)","url":"isolines(java.util.List,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"isolines(PShape, PVector, double)","url":"isolines(processing.core.PShape,processing.core.PVector,double)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"isolinesJP(double[][], double)","url":"isolinesJP(double[][],double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"isSimple(PShape)","url":"isSimple(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"length(PShape)","url":"length(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"lineSegmentIntersections(List<PVector>)","url":"lineSegmentIntersections(java.util.List)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"maximumInscribedCircle(PShape, double)","url":"maximumInscribedCircle(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"maximumInscribedCircle(PShape, PVector)","url":"maximumInscribedCircle(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs.utility","c":"MaximumInscribedRectangle","l":"MaximumInscribedRectangle(Geometry, double)","url":"%3Cinit%3E(org.locationtech.jts.geom.Geometry,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"maximumInscribedRectangle(PShape, boolean)","url":"maximumInscribedRectangle(processing.core.PShape,boolean)"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull.ThresholdHeuristic","l":"MED"},{"p":"micycle.pgs","c":"PGS_Contour","l":"medialAxis(PShape, double, double, double)","url":"medialAxis(processing.core.PShape,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumBoundingCircle(PShape)","url":"minimumBoundingCircle(processing.core.PShape)"},{"p":"micycle.pgs.utility","c":"MinimumBoundingEllipse","l":"MinimumBoundingEllipse(double[][], double)","url":"%3Cinit%3E(double[][],double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumBoundingEllipse(PShape, double)","url":"minimumBoundingEllipse(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumBoundingRectangle(PShape)","url":"minimumBoundingRectangle(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumDiameter(PShape)","url":"minimumDiameter(processing.core.PShape)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"minkDiff(Geometry, Geometry, Boolean, Boolean)","url":"minkDiff(org.locationtech.jts.geom.Geometry,org.locationtech.jts.geom.Geometry,java.lang.Boolean,java.lang.Boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"minkDiff(Geometry, Geometry)","url":"minkDiff(org.locationtech.jts.geom.Geometry,org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"minkDifference(PShape, PShape)","url":"minkDifference(processing.core.PShape,processing.core.PShape)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"Minkowski_Sum()","url":"%3Cinit%3E()"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"minkSum(Geometry, Geometry, Boolean, Boolean)","url":"minkSum(org.locationtech.jts.geom.Geometry,org.locationtech.jts.geom.Geometry,java.lang.Boolean,java.lang.Boolean)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"minkSum(Geometry, Geometry)","url":"minkSum(org.locationtech.jts.geom.Geometry,org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"minkSum(PShape, PShape)","url":"minkSum(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"MITER"},{"p":"micycle.pgs.color","c":"Blending","l":"multiply(int, int)","url":"multiply(int,int)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Ray","l":"nextEdge"},{"p":"micycle.pgs","c":"PGS_Contour","l":"offsetCurvesInward(PShape, PGS_Contour.OffsetStyle, double)","url":"offsetCurvesInward(processing.core.PShape,micycle.pgs.PGS_Contour.OffsetStyle,double)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"offsetCurvesOutward(PShape, PGS_Contour.OffsetStyle, double, int)","url":"offsetCurvesOutward(processing.core.PShape,micycle.pgs.PGS_Contour.OffsetStyle,double,int)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Edge","l":"p1"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Edge","l":"p2"},{"p":"micycle.pgs","c":"PGS_Processing","l":"partition(PShape)","url":"partition(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"PGS_Construction()","url":"%3Cinit%3E()"},{"p":"micycle.pgs.color","c":"RGB","l":"PINK"},{"p":"micycle.pgs","c":"PGS_Processing","l":"pointOnExterior(PShape, double, double)","url":"pointOnExterior(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"pointsOnExterior(PShape, double, double)","url":"pointsOnExterior(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"pointsOnExterior(PShape, int, double)","url":"pointsOnExterior(processing.core.PShape,int,double)"},{"p":"micycle.pgs.utility","c":"PoissonDistribution","l":"PoissonDistribution()","url":"%3Cinit%3E()"},{"p":"micycle.pgs.utility","c":"PoissonDistribution","l":"PoissonDistribution(long)","url":"%3Cinit%3E(long)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"poissonTriangulation(PShape, double)","url":"poissonTriangulation(processing.core.PShape,double)"},{"p":"micycle.pgs.utility","c":"PolygonDecomposition","l":"PolygonDecomposition()","url":"%3Cinit%3E()"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Ray","l":"prevEdge"},{"p":"micycle.pgs.utility","c":"RandomPolygon","l":"RandomPolygon()","url":"%3Cinit%3E()"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Ray","l":"Ray(PVector, PVector, SolubSkeleton.Edge, SolubSkeleton.Edge)","url":"%3Cinit%3E(processing.core.PVector,processing.core.PVector,micycle.pgs.utility.SolubSkeleton.Edge,micycle.pgs.utility.SolubSkeleton.Edge)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"rays"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"reflectionOrgCoordArray(Coordinate[])","url":"reflectionOrgCoordArray(org.locationtech.jts.geom.Coordinate[])"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"reflectionOrgGeom(Geometry)","url":"reflectionOrgGeom(org.locationtech.jts.geom.Geometry)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"reflectionOrgLS(LineString)","url":"reflectionOrgLS(org.locationtech.jts.geom.LineString)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"reflectionOrgPlg(Polygon)","url":"reflectionOrgPlg(org.locationtech.jts.geom.Polygon)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerAlpha","l":"removeable(Coordinate, Coordinate, Coordinate)","url":"removeable(org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerChi","l":"removeable(Coordinate, Coordinate, Coordinate)","url":"removeable(org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerPark","l":"removeable(Coordinate, Coordinate, Coordinate)","url":"removeable(org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"removeSmallHoles(PShape, double)","url":"removeSmallHoles(processing.core.PShape,double)"},{"p":"micycle.pgs.color","c":"RGB","l":"RGB()","url":"%3Cinit%3E()"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"rotate(PShape, PVector, double)","url":"rotate(processing.core.PShape,processing.core.PVector,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"rotateAroundCenter(PShape, double)","url":"rotateAroundCenter(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"ROUND"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"round(PShape, double)","url":"round(processing.core.PShape,double)"},{"p":"micycle.pgs.utility","c":"CornerRounding","l":"round(PShape, double)","url":"round(processing.core.PShape,double)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"run()"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"scale(PShape, double, double)","url":"scale(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"scale(PShape, double)","url":"scale(processing.core.PShape,double)"},{"p":"micycle.pgs.color","c":"Blending","l":"screen(int, int)","url":"screen(int,int)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"segLSAddition(Coordinate, Coordinate, Coordinate[], GeometryFactory)","url":"segLSAddition(org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate[],org.locationtech.jts.geom.GeometryFactory)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"segPlgAddition(Coordinate[], Coordinate, Coordinate, boolean, GeometryFactory)","url":"segPlgAddition(org.locationtech.jts.geom.Coordinate[],org.locationtech.jts.geom.Coordinate,org.locationtech.jts.geom.Coordinate,boolean,org.locationtech.jts.geom.GeometryFactory)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"setAllFillColor(PShape, int)","url":"setAllFillColor(processing.core.PShape,int)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"setAllStrokeColor(PShape, int, int)","url":"setAllStrokeColor(processing.core.PShape,int,int)"},{"p":"uk.osgb.algorithm.minkowski_sum","c":"Minkowski_Sum","l":"setGeometryFactory(GeometryFactory)","url":"setGeometryFactory(org.locationtech.jts.geom.GeometryFactory)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerAlpha","l":"setR(double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"shapeIntersections(PShape, PShape)","url":"shapeIntersections(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"shear(PShape, double, double)","url":"shear(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"similarity(PShape, PShape)","url":"similarity(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"simplify(PShape, double)","url":"simplify(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"simplifyTopology(PShape, double)","url":"simplifyTopology(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"simplifyVW(PShape, double)","url":"simplifyVW(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"slice(PShape, PVector, PVector)","url":"slice(processing.core.PShape,processing.core.PVector,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"smooth(PShape, double)","url":"smooth(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"smoothGaussian(PShape, double)","url":"smoothGaussian(processing.core.PShape,double)"},{"p":"org.geodelivery.jap.concavehull","c":"SnapHull","l":"SnapHull()","url":"%3Cinit%3E()"},{"p":"org.geodelivery.jap.concavehull","c":"SnapHull","l":"snapHull(Geometry, double, int, double)","url":"snapHull(org.locationtech.jts.geom.Geometry,double,int,double)"},{"p":"org.geodelivery.jap.concavehull","c":"SnapHull","l":"snapHull(Geometry, double)","url":"snapHull(org.locationtech.jts.geom.Geometry,double)"},{"p":"org.geodelivery.jap.concavehull","c":"SnapHull","l":"snapHull(Geometry)","url":"snapHull(org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"snapHull(PShape, double)","url":"snapHull(processing.core.PShape,double)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"SolubSkeleton(List<PVector>, float)","url":"%3Cinit%3E(java.util.List,float)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"solveApollonius(PVector, PVector, PVector, int, int, int)","url":"solveApollonius(processing.core.PVector,processing.core.PVector,processing.core.PVector,int,int,int)"},{"p":"micycle.pgs.color","c":"Composite","l":"sourceHeldOut(int, int)","url":"sourceHeldOut(int,int)"},{"p":"micycle.pgs.color","c":"Composite","l":"sourceOver(int, int)","url":"sourceOver(int,int)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Bone","l":"sp1"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Bone","l":"sp2"},{"p":"micycle.pgs","c":"PGS_Processing","l":"split(PShape, int)","url":"split(processing.core.PShape,int)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"split(PShape)","url":"split(processing.core.PShape)"},{"p":"micycle.pgs.utility","c":"SolubSkeleton.Ray","l":"startPoint"},{"p":"micycle.pgs","c":"PGS_Contour","l":"straightSkeleton(PShape)","url":"straightSkeleton(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"straightSkeletonSolub(PShape)","url":"straightSkeletonSolub(processing.core.PShape)"},{"p":"micycle.pgs.color","c":"Blending","l":"subtract(int, int)","url":"subtract(int,int)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"subtract(PShape, PShape)","url":"subtract(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"symDifference(PShape, PShape)","url":"symDifference(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"toPShape(Geometry)","url":"toPShape(org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"toPVector(PShape)","url":"toPVector(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"touch(PShape, PShape)","url":"touch(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"touchScale(PShape, PShape, double)","url":"touchScale(processing.core.PShape,processing.core.PShape,double)"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull","l":"transform(Geometry)","url":"transform(org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"translate(PShape, double, double)","url":"translate(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"translateTo(PShape, double, double)","url":"translateTo(processing.core.PShape,double,double)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerAlpha","l":"TriCheckerAlpha(double)","url":"%3Cinit%3E(double)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerChi","l":"TriCheckerChi(double)","url":"%3Cinit%3E(double)"},{"p":"uk.osgb.algorithm.concavehull","c":"TriCheckerPark","l":"TriCheckerPark(double, double)","url":"%3Cinit%3E(double,double)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"union(PShape, PShape)","url":"union(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"union(PShape...)","url":"union(processing.core.PShape...)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull.ThresholdHeuristic","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"values()"},{"p":"org.geodelivery.jap.concavehull","c":"ConcaveHull.ThresholdHeuristic","l":"values()"},{"p":"micycle.pgs.utility","c":"SolubSkeleton","l":"vertices"},{"p":"micycle.pgs","c":"PGS_Voronoi","l":"voronoiCirclesDiagram(Iterable<PVector>, int, boolean)","url":"voronoiCirclesDiagram(java.lang.Iterable,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Voronoi","l":"voronoiDiagram(PShape, boolean)","url":"voronoiDiagram(processing.core.PShape,boolean)"},{"p":"micycle.pgs.color","c":"RGB","l":"WHITE"},{"p":"micycle.pgs.color","c":"Composite","l":"xor(int, int)","url":"xor(int,int)"}]