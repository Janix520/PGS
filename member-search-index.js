memberSearchIndex = [{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"area(PShape)","url":"area(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"BEVEL"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"buffer(PShape, double)","url":"buffer(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"centroid(PShape)","url":"centroid(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"circularity(PShape)","url":"circularity(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"closestPoint(PShape, PVector)","url":"closestPoint(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"closestPoints(PShape, PVector)","url":"closestPoints(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"complement(PShape, double, double)","url":"complement(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"concaveHull(List<PVector>, double)","url":"concaveHull(java.util.List,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"concaveHull2(List<PVector>, double)","url":"concaveHull2(java.util.List,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"contains(PShape, PShape)","url":"contains(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"containsAllPoints(PShape, List<PVector>)","url":"containsAllPoints(processing.core.PShape,java.util.List)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"containsPoint(PShape, PVector)","url":"containsPoint(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"containsPoints(PShape, List<PVector>)","url":"containsPoints(processing.core.PShape,java.util.List)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"convexHull(PShape...)","url":"convexHull(processing.core.PShape...)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createArc(double, double, double, double, double, double)","url":"createArc(double,double,double,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createRandomPolygon(int, double, double)","url":"createRandomPolygon(int,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createRandomPolygonExact(int, double, double)","url":"createRandomPolygonExact(int,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createStar(double, double, int, double, double, double)","url":"createStar(double,double,int,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createSupercircle(double, double, double, double, double)","url":"createSupercircle(double,double,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Construction","l":"createSuperShape(double, double, double, double, double, double, double)","url":"createSuperShape(double,double,double,double,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"delaunayTriangulation(PShape, List<PVector>, boolean, int, boolean)","url":"delaunayTriangulation(processing.core.PShape,java.util.List,boolean,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"delaunayTriangulationPoints(PShape, List<PVector>, boolean, int, boolean)","url":"delaunayTriangulationPoints(processing.core.PShape,java.util.List,boolean,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"delaunayTriangulationTin(PShape, List<PVector>, boolean, int, boolean)","url":"delaunayTriangulationTin(processing.core.PShape,java.util.List,boolean,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"densify(PShape, double)","url":"densify(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"density(PShape)","url":"density(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"disableAllFill(PShape)","url":"disableAllFill(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"disableAllStroke(PShape)","url":"disableAllStroke(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"distance(PShape, PShape)","url":"distance(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"earCutTriangulation(List<PVector>)","url":"earCutTriangulation(java.util.List)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"envelope(PShape)","url":"envelope(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"erosionDilation(PShape, double)","url":"erosionDilation(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipHorizontal(PShape, double)","url":"flipHorizontal(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipHorizontal(PShape)","url":"flipHorizontal(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipVertical(PShape, double)","url":"flipVertical(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"flipVertical(PShape)","url":"flipVertical(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"fromPShape(PShape)","url":"fromPShape(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"fromPVector(List<PVector>)","url":"fromPVector(java.util.List)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"generateRandomGridPoints(PShape, int, boolean, double)","url":"generateRandomGridPoints(processing.core.PShape,int,boolean,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"generateRandomPoints(PShape, int)","url":"generateRandomPoints(processing.core.PShape,int)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"getChildren(PShape, List<PShape>)","url":"getChildren(processing.core.PShape,java.util.List)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"holes(PShape)","url":"holes(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"homotheticTransformation(PShape, PVector, double, double)","url":"homotheticTransformation(processing.core.PShape,processing.core.PVector,double,double)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"intersect(PShape, PShape)","url":"intersect(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"intersect(PShape, PShape)","url":"intersect(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"isConvex(PShape)","url":"isConvex(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"isolines(List<PVector>, double, double, double)","url":"isolines(java.util.List,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"isolines(PShape, PVector, double)","url":"isolines(processing.core.PShape,processing.core.PVector,double)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"isolinesJP(double[][], double)","url":"isolinesJP(double[][],double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"isSimple(PShape)","url":"isSimple(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"length(PShape)","url":"length(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"lineSegmentIntersections(List<PVector>)","url":"lineSegmentIntersections(java.util.List)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"maximumInscribedCircle(PShape, double)","url":"maximumInscribedCircle(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"maximumInscribedCircle(PShape, PVector)","url":"maximumInscribedCircle(processing.core.PShape,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"maximumInscribedRectangle(PShape, boolean)","url":"maximumInscribedRectangle(processing.core.PShape,boolean)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"medialAxis(PShape, double, double, double)","url":"medialAxis(processing.core.PShape,double,double,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumBoundingCircle(PShape)","url":"minimumBoundingCircle(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumBoundingEllipse(PShape, double)","url":"minimumBoundingEllipse(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumBoundingRectangle(PShape)","url":"minimumBoundingRectangle(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"minimumDiameter(PShape)","url":"minimumDiameter(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"minkDifference(PShape, PShape)","url":"minkDifference(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"minkSum(PShape, PShape)","url":"minkSum(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"MITER"},{"p":"micycle.pgs","c":"PGS_Contour","l":"offsetCurvesInward(PShape, PGS_Contour.OffsetStyle, double)","url":"offsetCurvesInward(processing.core.PShape,micycle.pgs.PGS_Contour.OffsetStyle,double)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"offsetCurvesOutward(PShape, PGS_Contour.OffsetStyle, double, int)","url":"offsetCurvesOutward(processing.core.PShape,micycle.pgs.PGS_Contour.OffsetStyle,double,int)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"partition(PShape)","url":"partition(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"pointOnExterior(PShape, double, double)","url":"pointOnExterior(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"pointsOnExterior(PShape, double, double)","url":"pointsOnExterior(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"pointsOnExterior(PShape, int, double)","url":"pointsOnExterior(processing.core.PShape,int,double)"},{"p":"micycle.pgs","c":"PGS_Triangulation","l":"poissonTriangulation(PShape, double)","url":"poissonTriangulation(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"removeSmallHoles(PShape, double)","url":"removeSmallHoles(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"resize(PShape, double, double)","url":"resize(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"rotate(PShape, PVector, double)","url":"rotate(processing.core.PShape,processing.core.PVector,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"rotateAroundCenter(PShape, double)","url":"rotateAroundCenter(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"ROUND"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"round(PShape, double)","url":"round(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"scale(PShape, double, double)","url":"scale(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"scale(PShape, double)","url":"scale(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"setAllFillColor(PShape, int)","url":"setAllFillColor(processing.core.PShape,int)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"setAllStrokeColor(PShape, int, int)","url":"setAllStrokeColor(processing.core.PShape,int,int)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"shapeIntersections(PShape, PShape)","url":"shapeIntersections(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"shear(PShape, double, double)","url":"shear(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"similarity(PShape, PShape)","url":"similarity(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"simplify(PShape, double)","url":"simplify(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"simplifyTopology(PShape, double)","url":"simplifyTopology(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"simplifyVW(PShape, double)","url":"simplifyVW(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"slice(PShape, PVector, PVector)","url":"slice(processing.core.PShape,processing.core.PVector,processing.core.PVector)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"smooth(PShape, double)","url":"smooth(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Morphology","l":"smoothGaussian(PShape, double)","url":"smoothGaussian(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"snapHull(PShape, double)","url":"snapHull(processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Optimisation","l":"solveApollonius(PVector, PVector, PVector, int, int, int)","url":"solveApollonius(processing.core.PVector,processing.core.PVector,processing.core.PVector,int,int,int)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"split(PShape, int)","url":"split(processing.core.PShape,int)"},{"p":"micycle.pgs","c":"PGS_Processing","l":"split(PShape)","url":"split(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"straightSkeleton(PShape)","url":"straightSkeleton(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Contour","l":"straightSkeletonSolub(PShape)","url":"straightSkeletonSolub(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"subtract(PShape, PShape)","url":"subtract(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"symDifference(PShape, PShape)","url":"symDifference(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"toPShape(Geometry)","url":"toPShape(org.locationtech.jts.geom.Geometry)"},{"p":"micycle.pgs","c":"PGS_Conversion","l":"toPVector(PShape)","url":"toPVector(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapePredicates","l":"touch(PShape, PShape)","url":"touch(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"touchScale(PShape, PShape, double)","url":"touchScale(processing.core.PShape,processing.core.PShape,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"translate(PShape, double, double)","url":"translate(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"translateTo(PShape, double, double)","url":"translateTo(processing.core.PShape,double,double)"},{"p":"micycle.pgs","c":"PGS_Transformation","l":"translateToOrigin(PShape)","url":"translateToOrigin(processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"union(PShape, PShape)","url":"union(processing.core.PShape,processing.core.PShape)"},{"p":"micycle.pgs","c":"PGS_ShapeBoolean","l":"union(PShape...)","url":"union(processing.core.PShape...)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"micycle.pgs","c":"PGS_Contour.OffsetStyle","l":"values()"},{"p":"micycle.pgs","c":"PGS_Voronoi","l":"voronoiCirclesDiagram(Iterable<PVector>, int, boolean)","url":"voronoiCirclesDiagram(java.lang.Iterable,int,boolean)"},{"p":"micycle.pgs","c":"PGS_Voronoi","l":"voronoiDiagram(PShape, boolean)","url":"voronoiDiagram(processing.core.PShape,boolean)"}]